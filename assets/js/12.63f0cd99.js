(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{409:function(t,n,a){"use strict";a.r(n);var e=a(56),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-执行上下文栈"}},[t._v("#")]),t._v(" JS 执行上下文栈")]),t._v(" "),a("ul",[a("li",[t._v("下面主要分析js中的代码是怎么执行的")]),t._v(" "),a("li",[t._v("分析js中的代码执行如何管理")])]),t._v(" "),a("h2",{attrs:{id:"js中的代码如何执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的代码如何执行"}},[t._v("#")]),t._v(" js中的代码如何执行")]),t._v(" "),a("ul",[a("li",[t._v("js的代码是按顺序执行的吗，我们先看demo")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" var f1 = function(){\n     console.log('f1')\n }\n\n f1() // 输出f1\n var f2 = function(){\n     console.log('f2')\n }\n f2() // 输出 f2\n")])])]),a("p",[t._v("如果是这个例子，很容易看出js是按顺序执行的，我们在看另外的demo")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function f1(){\n    console.log('f1')\n}\nf1() // 输出f2\nfunction f1(){\n    console.log('f2')\n}\nf1() // 输出f2\n")])])]),a("p",[t._v("这个时候，输出的都是f2，这就打破了我们的认知，js中的代码并非是一行一行执行的，而是一段一段执行的，当执行一段代码的时候，会进入编译准备工作，这个时候就会存在变量、函数的提升工作;\n第一个例子可以理解成下面的代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" var f1\n var f2\n f1 = function(){console.log('f1')}\n f1()\n f2 = function(){console.log('f2')}\n")])])]),a("p",[t._v("第二个例子可以理解成")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function f1(){console.log('f2')}\nf1()\nf1()\n")])])]),a("h2",{attrs:{id:"js中的执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的执行上下文"}},[t._v("#")]),t._v(" js中的执行上下文")]),t._v(" "),a("ul",[a("li",[t._v("上面的例子中提到了编译准备工作，这个编译准备也可以叫做执行上下文")]),t._v(" "),a("li",[t._v("其实在js中，存在全局上下文、函数上下文、eval上下文")])]),t._v(" "),a("h2",{attrs:{id:"执行上下文包含哪些内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文包含哪些内容"}},[t._v("#")]),t._v(" 执行上下文包含哪些内容")]),t._v(" "),a("ul",[a("li",[t._v("js的执行上下文中包含了变量对象、作用域链、this;后面会一一详细解析这三个属性")]),t._v(" "),a("li",[t._v("分析全局的上下文伪代码如下")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" var scope = 'glabal scope'\n function f1(){}\n")])])]),a("p",[t._v("//创建的全局上下文如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" globalContext = {\n     VO:{ //variable object 存放了当前作用的的变量\n         scope:undefined\n         f1:function f1(){}\n     },\n     scope:[globalContext.VO],//存放了变量对象的链表结构\n     this: globalContext\n }\n")])])]),a("h2",{attrs:{id:"js中的执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的执行上下文栈"}},[t._v("#")]),t._v(" js中的执行上下文栈")]),t._v(" "),a("p",[t._v("当我们在写代码的时候，会定义很多函数，那js是如何去管理的呐\n所以在js中会创建一个栈的数据结构去管理执行上下文，我们可以用ECStack是一个数组的结构来表示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" ECStack = []\n")])])]),a("p",[t._v("当我们开始执行js代码的时候，最先解析的是全局上下文的代码，那这个时候，全局的上下文就先入栈，遇到函数执行的时候，才会创建函数上下文，然后推入栈中，执行完成后出栈，当整个程序运行完成之后，栈才会被清空，我们写个demo来分析一下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function f1(){\n    f2()\n    console.log('f1')\n}\nfunction f2(){\n    f3()\n    console.log('f2')\n}\nfunction f3(){\n    console.log('f3')\n}\nf1() // f3,f2,f1\n")])])]),a("p",[t._v("上面代码中会输出：f3,f2,f1\n我们可以伪代码演示一下执行的过程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1、\b进入全局上下文，先入栈\nECStack = [globalContext]\n2、执行f1()\nECStack.push(f1Context)\nECStack = [f1Context,globalContext]\n3、f1中先调用f2,再入栈\nECStack.push(f2Context)\nECStack = [f2Context,f1Context,globalContext]\n4、f2中又调用f3,再入栈\nECStack.push(f3Context)\nECStack = [f3Context,f2Context,f1Context,globalContext]\n5、f3执行完毕\nECStack.pop()\nECStack = [f2Context,f1Context,globalContext]\n6、f2执行完毕\nECStack.pop()\nECStack = [f1Context,globalContext]\n7、f1执行完成\nECStack.pop()\nECStack = [globalContext]\n\n")])])]),a("h2",{attrs:{id:"解析上一章的思考题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析上一章的思考题"}},[t._v("#")]),t._v(" 解析上一章的思考题")]),t._v(" "),a("p",[t._v("我们理解了js的执行上下文栈了，我们分别分析一下他们的执行上下文栈")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" var scope = 'global scope'\n function checkscope(){\n     var scope = 'local socpe'\n     function f(){\n         return scope\n     }\n     f()\n }\n checkscope()\n \n  // 上下文栈\n  1、ECStack = [globaleContext]\n  2、checkscope执行\n  ECStack.push(checkscopeContext)\n  ECStack = [checkscopeContext , globaleContext]\n  3、f执行\n  ECStack.push(f1Context)\n  ECStack = [f1Context , checkscopeContext , globaleContext]\n  4、f1执行完成\n  ECStack.pop()\n  ECStack = [checkscopeContext , globaleContext]\n  5、checkscope执行完成\n  ECStack.pop()\n  ECStack = [f1Context , checkscopeContext , globaleContext]\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" var scope = 'glabal scope'\n function checkscope(){\n     var scope = 'local scope'\n     function f(){\n         return scope\n     }\n     return f\n }\n\n checkscope()()\n\n  // 上下文栈\n  1、ECStack = [globaleContext]\n  2、checkscope执行\n  ECStack.push(checkscopeContext)\n  ECStack = [checkscopeContext , globaleContext]\n  3、checkscope执行完成\n  ECStack.pop()\n  ECStack = [globaleContext]\n  4、f1执行\n  ECStack.push(f1Context)\n  ECStack = [checkscopeContext , globaleContext]\n  5、f1执行完成\n  ECStack.pop()\n  ECStack = [globaleContext]\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);
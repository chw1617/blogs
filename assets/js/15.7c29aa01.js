(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{412:function(t,o,a){"use strict";a.r(o);var n=a(56),e=Object(n.a)({},(function(){var t=this,o=t.$createElement,a=t._self._c||o;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-原型链"}},[t._v("#")]),t._v(" JS 原型链")]),t._v(" "),a("h2",{attrs:{id:"原型关系图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型关系图"}},[t._v("#")]),t._v(" 原型关系图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/prototype.png",alt:"avatar"}})]),t._v(" "),a("h2",{attrs:{id:"构造函数创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数创建对象"}},[t._v("#")]),t._v(" 构造函数创建对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(name){\n    this.name = name\n}\nvar f1 = new Foo('cc')\nvar f2 = new Foo('chw')\n")])])]),a("p",[t._v("解析：上面例子中 Person是构造函数，通过new关键字实例了两个实例对象p1、p2,下面我们分别解析他们之间的关系")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//模拟new 实现\n\n")])])]),a("h2",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\n//prototype 是函数特有的属性\nFoo.prototype.name = 'cc'\nvar f1 = new Foo()\nvar f2 = new Foo()\nf1.name //cc\nf2.name //cc\n\n")])])]),a("ul",[a("li",[t._v("prototype 是每一个函数特有的属性")]),t._v(" "),a("li",[t._v("prototype本质上它是一个对象，它是构造函数实例化对象p1、p2的原型")]),t._v(" "),a("li",[t._v("原型我们可以这样理解，在js中除了null,其他对象产生的时候都有一个与之关联的对象（可以理解成父级），然后可以从关联的对象上继承属性，这个关联的对象就是原型")])]),t._v(" "),a("h2",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),a("strong",[t._v("proto")])]),t._v(" "),a("ul",[a("li",[t._v("在js 中每个对象除了null之外，都拥有一个__proto__属性，指向了自己的原型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\nvar f1 = new Foo()\nf1.__proto__ === Foo.prototype\n")])])]),a("h2",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("ul",[a("li",[t._v("constructor是prototype上的一个属性，指向了构造函数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\nvar f1 = new Foo()\n//关系\nf1.__proto__ === Foo.prototype\nFoo.prototype = {\n    construtor:Foo\n}\nFoo.prototype.construtor === Foo //true\nf1.constrctor === Foo //true 这个是继承得来\n")])])]),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("ul",[a("li",[t._v("定义：当我们访问一个对象的属性的时候，会先从自己的属性中查找，如果没有找到，就往自己的原型__proto__中查找，如果原型上还是没有找到，就继续往原型的原型上找，最终找到null, 这种通过__proto__属性连接起来的链表就是原型链")]),t._v(" "),a("li",[t._v("我们看demo来分析一下")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\nFoo.prototype.name = 'cc'\nvar f1 = new Foo()\n\nf1.name = 'c'\nconsole.log(f1.name) //c\n\ndelete p.name \nconsole.log(f1.name) //cc\n\n")])])]),a("p",[t._v("1、第一次访问p1的name属性的时候，自己本身就有所以就输出c\n2、第一次访问p1name的时候，由于把本身的name属性删除，那么只能往原型中找，找到了name = 'cc'，所以输出cc")]),t._v(" "),a("h2",{attrs:{id:"拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展"}},[t._v("#")]),t._v(" 拓展")]),t._v(" "),a("ul",[a("li",[t._v("原型的原型：我们知道原型也是一个对象,那它肯定有自己的原型，它指向的是Object构造函数的porototype")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\nFoo.prototype.name = 'cc'\n\n//原型\nFoo.prototype = {\n    constructor:Foo,\n    name:'cc',\n    __proto__:Object.prototype //原型的原型\n}\n//在控制台中是 __proto__ === [[Prototype]] \n")])])]),a("ul",[a("li",[t._v("构造函数也是一个对象,如果构造函数也是一个对象，那么就有一个与之关联的原型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Foo(){}\n\n//构造函数的原型\nFoo.__proto__ === Function //也是创建函数的顶端\nArray.__proto__ === Function\nObject.__proto__ === Function\n\nFunction.prototype === Function.__proto__\nFunction.prototype.__proto__ === Object.prototype\nObject.prototype.__proto__ === null\n")])])])])}),[],!1,null,null,null);o.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{416:function(t,v,_){"use strict";_.r(v);var s=_(56),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"浏览器工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),_("ul",[_("li",[t._v("用户界面 ：用户看到的界面、tab")]),t._v(" "),_("li",[t._v("浏览器引擎： 数据持久化(cookie,localstroage),还有负责用户和渲染引擎交互和数据传递")]),t._v(" "),_("li",[t._v("渲染引擎：（内核）包含页面渲染模块、网络模块、js解析模块")])]),t._v(" "),_("h2",{attrs:{id:"进程与线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[t._v("#")]),t._v(" 进程与线程")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("进程process是操作系统资源分配和调度的基本单元")])]),t._v(" "),_("li",[_("p",[t._v("线程thread是操作系统能够进行运算的基本单位，一个进程可以并发多个线程，每个线程处理不同的任务")])]),t._v(" "),_("li",[_("p",[t._v("可以利用ipc来进行进程间的通信")])]),t._v(" "),_("li",[_("p",[t._v("浏览器是运行在操作上的一个程序，每开启一个程序都需要开启一个进程处理")])]),t._v(" "),_("li",[_("p",[t._v("每一个程序都有很多小的任务，那么这些小的任务都需要进程开启线程来处理")])])]),t._v(" "),_("h2",{attrs:{id:"多进程浏览器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器"}},[t._v("#")]),t._v(" 多进程浏览器")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("浏览器进程：控制除了标签页外的用户界面，包含前进后退，地址栏，书签，还有浏览器其他进程的协调工作")])]),t._v(" "),_("li",[_("p",[t._v("GPU进程：整个浏览器的渲染")])]),t._v(" "),_("li",[_("p",[t._v("插件进程： flash插件")])]),t._v(" "),_("li",[_("p",[t._v("缓存进程：")])]),t._v(" "),_("li",[_("p",[t._v("网络进程：发起的网络请求")])]),t._v(" "),_("li",[_("p",[t._v("渲染进程：负责tab标签内的所有内容的渲染，可能为每一个标签页创建一个进程")])]),t._v(" "),_("li",[_("p",[t._v("每个tab 创建一个render process 渲染进程 - main thread - dom")])])]),t._v(" "),_("h2",{attrs:{id:"输入url发生啥"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#输入url发生啥"}},[t._v("#")]),t._v(" 输入url发生啥")]),t._v(" "),_("ul",[_("li",[t._v("如果是不是网址，浏览器就直接进行搜索，如果是一个网址就开启一个网络线程请求dns进行域名解析")]),t._v(" "),_("li",[t._v("\bdns 解析域名拿到ip地址")]),t._v(" "),_("li",[t._v("这个过程会利用tcp/ip协议来传输数据包 1.应用层：提供特定应用程序的协议http,ftp;传输控制层：发送数据包到计算机使用特定端口号的应用程序，tcp是面向连接，可靠协议，经历三次握手阶段；网络层：使用ip地址将数据包发送到特定计算机;链路层：二进制数据包与网络信号之间互相转换;物理层")]),t._v(" "),_("li",[t._v("ip 地址会找到对应的服务")]),t._v(" "),_("li",[t._v("服务放通过网络将页面内容返回给浏览器")]),t._v(" "),_("li",[t._v("浏览器拿到页面内容进行一一系列的解析渲染")]),t._v(" "),_("li",[t._v("网络进程拿到数据交给ui进程")]),t._v(" "),_("li",[t._v("ui进程通过ipc管道传给渲染进程")]),t._v(" "),_("li",[t._v("渲染进程主要负责html,css,img,js解析成页面，渲染进程的主进程先html解析成dom树")]),t._v(" "),_("li",[t._v("html 往往引入额外的图片,css,js; 图片和css 往往通过网络下载或者缓存中直接取出，不影响html解析，但是遇到script会停止html，先去解析js,因为js可能会改变dom结构,所以建议是用async,defer属性异步加载js")]),t._v(" "),_("li",[t._v("生成dom树之后还不知位置，主线程需要解析css style tree 结合生成layout tree")]),t._v(" "),_("li",[t._v("layout tree 之后开始绘制paint,然后丢给合成器线程，再丢给栅格线程,这两个线程不会干扰主线程，transform改变也是进行这两个线程")])]),t._v(" "),_("h2",{attrs:{id:"重排和重绘区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重排和重绘区别"}},[t._v("#")]),t._v(" 重排和重绘区别")]),t._v(" "),_("ul",[_("li",[t._v("都是运行在主线程上")]),t._v(" "),_("li",[t._v("重排：当我们改变一个元素的大小位置时候，会重新进行样式计算，重新布局绘制等流程")]),t._v(" "),_("li",[t._v("重绘：当我们改变元素的背景色时候，不会重新触发布局，但是还是会样式计算和绘制")]),t._v(" "),_("li",[t._v("重排一定会导致重绘，反之不一定")])]),t._v(" "),_("h2",{attrs:{id:"常见的浏览器内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的浏览器内核"}},[t._v("#")]),t._v(" 常见的浏览器内核")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(" chrome:blink\n safari:webkit\n ie:trident\n firefox:gecko\n")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{411:function(a,s,e){"use strict";e.r(s);var t=e(56),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"js-词法分析-静态作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-词法分析-静态作用域"}},[a._v("#")]),a._v(" JS 词法分析（静态作用域）")]),a._v(" "),e("h2",{attrs:{id:"作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),e("ul",[e("li",[a._v("作用域是程序中定义变量的区域")]),a._v(" "),e("li",[a._v("作用域规定了如何查找变量，也就是确定了当前代码访问变量的范围")]),a._v(" "),e("li",[a._v("js中采用的词法作用域，也是静态作用域")]),a._v(" "),e("li",[a._v("js存在全局作用域、函数级作用域、es6的块级作用域")])]),a._v(" "),e("h2",{attrs:{id:"静态作用域和动态作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态作用域和动态作用域"}},[a._v("#")]),a._v(" 静态作用域和动态作用域")]),a._v(" "),e("ul",[e("li",[a._v("js中的词法作用域是静态作用域，也就是说函数定义的那一刻，作用域就已经确定了")]),a._v(" "),e("li",[a._v("与之相对立的是动态作用域，是函数执行的时候才确定作用域")]),a._v(" "),e("li",[a._v("我们来看一下下面的代码，分析一下")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  var value = 1\n  function print(){\n      console.log(value)\n  }\n  function fn(){\n      var value = 2\n      print()\n  }\n  fn() \n")])])]),e("p",[a._v("当采用静态作用域的时候：执行函数print的时候，先从自己的函数内部查找有没有局部变量value,如果没有就根据定义时候的位置往上查找，在这里是全局作用域，也就是value = 1,最终输出1，也是js中运行的结果")]),a._v(" "),e("p",[a._v("当采用动态作用域的时候：执行函数print的时候，也是先从自己的函数内部查找有没有局部变量，如果没有就从调用函数的作用域中查找，也就是在fn函数中找，找到value=2，最终输出2，在bash中就是动态作用域")]),a._v(" "),e("h2",{attrs:{id:"思考题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#思考题"}},[a._v("#")]),a._v(" 思考题")]),a._v(" "),e("p",[a._v("我们一起来思考一下《JavaScript权威指南》的例子")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" var scope = 'global scope'\n function checkscope(){\n     var scope = 'local socpe'\n     function f(){\n         return scope\n     }\n     f()\n }\n checkscope()\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" var scope = 'glabal scope'\n function checkscope(){\n     var scope = 'local scope'\n     function f(){\n         return scope\n     }\n     return f\n }\n\n checkscope()()\n")])])]),e("p",[a._v("上面的两个demo的最终输出的结果是都是 local scope\n为什么会输出一样的结果呐")]),a._v(" "),e("ul",[e("li",[a._v("很重要------------------js执行依赖当前的作用域链----------------")]),a._v(" "),e("li",[a._v("书中解析是：js的执行用到了作用域链，在函数f定义的那一刻，f的作用域链就已经确定下来了，一直保存在函数f的作用链中，无论在哪里执行函数f,scope取的都是局部的变量local scope。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);